install.packages("devtools")\
install.packages("devtools")
install.packages("roxygen2")
library(devtools)
install_github("devtools",'hadley')
load_all()
library(explore2.0)
load_all()
library(explore2.0)
library(explore2.0)
library(explore2.0)
library(explore2.0)
library(explore2.0)
library(explore2.0)
library(explore2.0)
library(explore2.0)
library(explore2.0)
library(explore2.0)
summary.table(diamonds[1:50,])
data("diamonds")
diamonds
data("diamonds")
data("iris")
summary.table(iris[1:50,])
iris[1:50,]
a <- iris[1:50,]
summary.table(a)
summary.table(a)
library(explore2.0)
summary_table(a)
Cor_pearson <- function(num,threshold){
# the function Cor_pearson() is going to return A data frame that contains each pair of column names in the first column
#(name the column “Variable Pairs”) and correlation coefficient (Pearson) for all coefficients whose absolute value
#is greater than the correlation threshold (do not repeat any pairs) in the second column
#parameter:
#num - a dataframe that all are numeric variables
#threshold - a value being coefficient threshold
#return:
#a dataframe that contains each pair of column names and corresponding correlation coefficient
colna <- colnames(num) # take out all the variables' names
com_num <- combn(colna, 2) #combine the names pairwise
VP2 <- c()
Cor <- c()  #create two empty vectors
for(i in 1:ncol(com_num)){
temp1 <- paste(com_num[1,i],com_num[2,i],sep = '-')  #write pairwise names
corr <- cor(num[,com_num[1,i]],num[,com_num[2,i]],method = "pearson") # count corresponding Pearson correlation coefficient
if(corr >= threshold){
VP2 <- c(VP2,temp1)
Cor <- c(Cor,corr)  #if correlation coefficient is greater than threshold then add them to vectors
}
}
CRR <- data.frame(VP2,Cor) #create dataframe for pairwise names and correlation coefficients
colnames(CRR) <- c("Variable Pairs","Pearson Exceeds Threshold")# rename the dataframe then return the result
return(CRR)
}
library(explore2.0)
num =iris[1:50,1:3]
num
rsquare(num)
Cor_pearson(num,0.1)
library(explore2.0)
plot_density_count(num)
library(explore2.0)
is.binary(c(1,1,1,0,0,1))
is.binary(c(1,1,1,0,0,4))
library(explore2.0)
explore(iris[1:500,])
explore1.0(iris[1:500,])
library(explore2.0)
explore1.0(iris[1:500,])
explore1.0(iris[1:500,])
explore1.0(iris[1:500,])
diamonds
data <- diamonds[1:400,]
explore1.0(data)
data2 <- iris[1:400]
data2 <- iris[1:400,]
explore1.0(data2)
class(data2)
class(data2[1])
explore1.0(data2,"grid",0.2)
explore1.0(data,"grid",0.5)
library(explore2.0)
explore(data,'grid',0.5,c(10,20))
library(explore2.0)
explore(data,'on',0.5,c(10))
z<-explore(data,'on',0.5,c(10))
class(z)
library(explore2.0)
m <- explore(data)
class(m)
z<- explore1.0(data)
explore(data2)
explore1.0(data2)
explore(data2)
explore1.0(data2)
a=1
b=2
print(a,b)
library(explore2.0)
print(a,b)
explore1.0(data2)
library(explore2.0)
library(explore2.0)
explore1.0(data2)
library(explore2.0)
z<-explore(data)
library(explore2.0)
library(explore2.0)
explore(data)
a=c(1,2,3)
b=c(3,5,6)
list1=list(a,b)
list1$a
list1
list1$a
list1[1]
list1[2]
explore(data)
library(explore2.0)
explore(data)
library(explore2.0)
explore(data)
library(explore2.0)
explore(data,'on')
library(explore2.0)
explore(data,'grid')
library(explore2.0)
explore(data,'grid')
explore(data,'grid',0.9,c(10))
library(explore2.0)
explore(data,'grid')
library(explore2.0)
library(explore2.0)
